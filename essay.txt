Домашнее задание:

ЭССЕ

"Нравится ли вам тестирование, останетесь ли вы в нем, для чего вам это обучение"

Тестирование мне очень нравится, и я отношусь к своей работе с благодарностью, что ли, так как это моя первая работа в сфере IT. Изначально у меня были совсем другие представления о тестировании: я думал, что тестировщики занимаются мониторингом кода и пишут юнит-тесты. Однако, когда я начал работать, постепенно понял, что это не совсем так. Тем не менее, сама работа оказалась для меня очень увлекательной.

В процессе работы я многому научился и теперь не могу представить большие компании без тестировщиков. Останусь ли я в этой профессии — вопрос спорный, но думаю, что если останусь, то не пожалею. Работа в команде также складывалась постепенно: новые знакомства, адаптация к атмосфере. Однако я считаю, что командная работа здесь играет очень важную роль.

Для тестировщика, на мой взгляд, очень важны внимательность и тщательность. На первый взгляд программа может работать корректно, но всегда есть нюансы. Некоторые моменты могут быть просто не продуманы и упущены. Тестировщик должен улавливать такие детали и ставить задачи разработчикам для дальнейшего улучшения продукта.

Кроме того, с каждым обновлением многие компоненты программы, будучи взаимосвязанными, могут вести себя некорректно. Изменение одной части может повлиять на работу другой — и это нельзя упускать из виду. Поэтому важно не только находить баги, но и анализировать возможные риски и последствия изменений.

Тестировщик должен следить за порядком и делать приложение более удобным для пользователя. Ведь в конечном итоге наша задача — создать качественный продукт, которым будет комфортно пользоваться. И чем лучше тестировщик выполняет свою работу, тем меньше проблем у конечного пользователя.


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Из всех методологий мне больше всего нравится Agile, а внутри неё — Kanban. Считаю, что эта методология гораздо удобнее по сравнению с другими. Например, в отличие от Scrum, где работа строится на жёстких спринтах, Kanban позволяет гибко управлять задачами и адаптироваться к изменениям без строгих временных рамок.

Благодаря Kanban-доске можно наблюдать за задачами коллег, что делает процесс более прозрачным. В отличие от Waterfall подхода, где каждый этап строго последовательный, Kanban позволяет быстрее реагировать на проблемы и вносить изменения в работу на лету. Это способствует более слаженной командной работе, так как каждый участник видит общую картину проекта и может подключиться к решению актуальных задач.

Kanban предоставляет множество преимуществ: прозрачность процессов, гибкость и возможность оперативного реагирования на изменения. В нашей команде мы также придерживаемся этой методологии и постоянно её совершенствуем, добавляя митапы для лучшего понимания рабочих процессов и повышения эффективности взаимодействия. Это позволяет нам избежать лишних недопонимании, и лучше сосредоточиться на работе .

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


AI-001

Название: Проверка добавления товара в корзину 
Описание: Проверка корректности добавления выбранного товара в корзину.

Предусловия:
1.Пользователь авторизован в приложении.
2.Интернет-соединение активно.
3.В каталоге доступны товары для покупки.

Шаги воспроизведения:

1. Открыть приложение(Авторизоаться).

2. Перейти в каталог товаров.

3. Выбрать любой товар из списка.

4. Нажать кнопку "Добавить в корзину".

Перейти в корзину и проверить наличие добавленного товара.

Ожидаемый результат:
Выбранный товар успешно добавляется в корзину и отображается в списке товаров в корзине.

Фактический результат: Товар не добавляется в корзину , если общая сумма в корзине больше чем 14 000тг и происходит краш , даже при добавлении одного товара со стоимостью 14К

-----------------------------------------------------------
Чек-лист для тестирования функций корзины

1. Проверка добавления товара в корзину.

2. Проверка удаления товара из корзины.

3. Проверка изменения количества товара в корзине.

4. Проверка очистки корзины.

5. Проверка оформления заказа.

6. Проверка отображения итоговой суммы.


-----------------------------------------------------------
AI-001 Краш приложения при добавлении товара на сумму более 14 000 тг
Описание: При добавлении товара в корзину, если общая сумма превышает 14 000 тг, приложение вылетает. Даже при добавлении одного товара стоимостью 14 000 тг приложение падает.

Шаги воспроизведения:

1.Открыть приложение.

2.Перейти в каталог товаров.

3.Выбрать товар стоимостью 14 000 тг или добавить несколько товаров, чтобы сумма корзины превысила 14 000 тг.

4.Нажать кнопку "Добавить в корзину".

5.Перейти в корзину и проверить состояние приложения.


Ожидаемый результат: Товар должен успешно добавляться в корзину независимо от его стоимости.

Фактический результат: Приложение падает, если общая сумма корзины превышает 14 000 тг.

Серьезность: Критическая (приложение падает, невозможно оформить заказ)Приоритет: Высокий (необходимо срочное исправление)

Среда тестирования:

iOS 18 , prod


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


1. Форма регистрации на сайте 

Тип теста: Функциональное тестирование

Подход к тестированию: Black Box

Уровень тестирования: Системное тестирование

Тест-кейс:

Название: Проверка успешной регистрации нового пользователя
Предусловия: Открыта страница регистрации

Шаги воспроизведения:
Ввести корректные данные во все поля (Имя, Email, Пароль, Подтверждение пароля)
Нажать кнопку «Зарегистрироваться»
Проверить сообщение об успешной регистрации
Ожидаемый результат: Пользователь успешно зарегистрирован и перенаправлен на страницу профиля.


2. Интернет-магазин, где необходимо выдержать одновременное пользование больше 1000 пользователей
Тип теста: Нагрузочное тестирование
Подход к тестированию: Black Box
Уровень тестирования: Системное тестирование
Тест-кейс:
Название: Тестирование устойчивости работы интернет-магазина при 1000+ одновременных пользователей
Предусловия: Доступны инструменты нагрузочного тестирования 
Шаги:
Смоделировать 1000+ одновременных пользователей
Запустить нагрузочный тест, симулирующий действия пользователей.
Мониторить время отклика сервера, процент ошибок, потребление ресурсов
Ожидаемый результат: Время отклика остается в пределах нормы, система не падает, процент ошибок минимален.

3. Регрессионное тестирование после исправления багов в корзине
Тип теста: Регрессионное тестирование
Подход к тестированию: Black Box
Уровень тестирования: Системное тестирование
Тест-кейс:
Название: Проверка работы поиска товаров, оформления заказа и оплаты после исправления багов в корзине
Предусловия: Доступ к исправленной версии сайта
Шаги:
Проверить работу поиска товаров (ввести запрос, убедиться в корректности результатов)
Добавить товар в корзину и оформить заказ
Перейти к оплате, выбрать способ оплаты, завершить оплату
Проверить, что заказ успешно создан
Ожидаемый результат: Исправления в корзине не повлияли на другие функциональности, все тестируемые функции работают корректно.

4. Тестирование регистрации + авторизации
Тип теста: Функциональное тестирование
Подход к тестированию: Black Box
Уровень тестирования: Системное тестирование
Тест-кейс:
Название: Успешная регистрация и авторизация пользователя
Предусловия: Открыта страница регистрации
Шаги:
Зарегистрировать нового пользователя
Выйти 
Ввести email и пароль на странице авторизации
Нажать «Войти»
Ожидаемый результат: Пользователь успешно авторизован и перенаправлен в личный кабинет.

5. Тестирование функции расчета итоговой суммы заказа в корзине
Тип теста: Функциональное тестирование
Подход к тестированию: Black Box
Уровень тестирования: Модульное тестирование
Тест-кейс:
Название: Проверка расчета итоговой суммы заказа
Предусловия: Корзина пуста
Шаги:
Добавить несколько товаров с разными ценами в корзину
Убедиться, что сумма пересчитывается корректно
Удалить один товар, проверить корректность итоговой суммы
Ожидаемый результат: Итоговая сумма корректно пересчитывается при добавлении и удалении товаров.

6. Функция расчета алгоритма скидок (есть доступ к коду)
Тип теста: Функциональное тестирование
Подход к тестированию: White Box
Уровень тестирования: Модульное тестирование
Тест-кейс:
Название: Проверка корректности расчета скидок
Предусловия: Известна логика расчета скидок
Шаги:
Написать unit-тест с разными комбинациями товаров и скидок
Проверить, соответствует ли расчет скидок заданной логике
Запустить тест и проверить результаты
Ожидаемый результат: Скидки рассчитываются корректно в соответствии с заданным алгоритмом.

7. Оплата заказа в интернет-магазине Тип теста: Интеграционное тестирование
Подход к тестированию: Gray Box
Уровень тестирования: Интеграционное тестирование
Тест-кейс:
Название: Проверка успешной оплаты заказа
Предусловия: В корзине есть товары, доступен тестовый платежный шлюз
Шаги:
Оформить заказ и перейти к оплате
Ввести платежные данные
Подтвердить оплату
Проверить, что заказ оформлен и оплата прошла успешно
Ожидаемый результат: Оплата проходит успешно, заказ получает статус «Оплачен».

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


 1. Эквивалентное разбиение

Система принимает возраст пользователя (целое число от 18 до 65). Разбиение диапазона значений на классы эквивалентности:

Валидные классы (возраст в допустимом диапазоне, который система принимает без ошибок):

Тестовые данные: 18, 35, 50, 65

Невалидные классы (возраст выходит за границы или является некорректным):

Тестовые данные: 17, 66, -5, "двадцать", 120, NULL

Примечание: 35 включен в валидные классы, так как это значение находится в середине допустимого диапазона и представляет собой типичное значение для проверки стандартного поведения системы.

2. Анализ граничных значений

Граничные значения для системы, принимающей возраст от 18 до 65:

Нижняя граница: 17 (недопустимо), 18 (допустимо)

Верхняя граница: 65 (допустимо), 66 (недопустимо)

3. Таблицы принятия решений

Клиент может оформить заказ при следующих условиях:

Авторизован

Товар в наличии

Доставка выбрана

Итоговое решение

0

0

0

Отклонено

0

1

1

Отклонено

1

0

0

Отклонено

1

1

1

Оформлен заказ

4. Парное тестирование

Фильтр товаров:

Категория

Цена

Скидка

Электроника

до 1000 руб.

1

Электроника

1000–5000 руб.

0

Одежда

1000–5000 руб.

1

Одежда

выше 5000 руб.

0

5. Диаграмма перехода состояний

Неавторизован → ввод логина → Ожидание ввода

Ожидание ввода → успешный ввод пароля → Авторизован

Ожидание ввода → три ошибки подряд → Заблокирован

Заблокирован → истечение времени → Неавторизован

6. Проверка требований

Требование: «Пользователь должен иметь возможность быстро и удобно вводить номер телефона и, если он введет его корректно, система может отправить SMS-код».

Ошибки:

«может отправить» — нечеткая формулировка. Должно быть четко определено, отправляется ли код в любом случае.

Не указаны ограничения на формат номера телефона.

Не описаны условия, при которых ввод считается корректным.

7. Анализ поведения системы

Требование: «Если пользователь трижды введет неверный пароль, его аккаунт будет заблокирован».

Разбиение на события и следствия:

Ввод пароля → успех → Авторизован

Ввод пароля → ошибка → увеличение счетчика

Достигнут предел в 3 ошибки → Аккаунт блокируется

8. Прототипирование

Для проверки удобства регистрации можно создать интерактивный прототип формы с полями ввода, подсказками, кнопкой регистрации и валидацией.

Добавить сообщения об ошибках и протестировать пользовательский опыт.

9. Чек-лист требований

Требование: «Система должна быстро обрабатывать заказы и отправлять их пользователям».

Проблемы:

«Быстро» — субъективное понятие, не измеримо.

Не указаны критерии скорости обработки.

Нет информации о способах доставки.

Не указаны условия, при которых заказ считается отправленным.
